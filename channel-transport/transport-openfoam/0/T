FoamFile
{
    version     2.0;
    format      ascii;
    class       volScalarField;
    object      T;
}

dimensions      [0 2 -2 0 0 0 0];

internalField   uniform 0;

boundaryField
{
    inlet
    {
        type            zeroGradient;
    }

    outlet
    {
        type            fixedValue;
        value           uniform 0;
    }

    obstacle
    {
        type            zeroGradient;
    }
    
    upperWall
    {
        type            zeroGradient;
    }

    lowerWall
    {
        type            zeroGradient;
    }

    frontAndBack
    {
        type            empty;
    }

    blob
    {
      type codedFixedValue;
      value uniform 0;
      redirectType    fixedValue;
      code
      #{
          const fvPatch& boundaryPatch = patch();
          scalarField& field = *this;

          // Blob parameters
          vector xblob(1, 1, 0);  // Center of the blob
          scalar R = 0.5;         // Characteristic length (radius)
          scalar width = 0.1;     // Smoothing factor

          forAll(boundaryPatch, faceI)
          {
              const point& faceCenter = boundaryPatch.faceCentres()[faceI];
              scalar distanceSquared = magSqr(faceCenter - xblob.xy());
              field[faceI] = 0.5 - 0.5 * tanh((distanceSquared - R*R) / width);
          }
      #};
    }
}
